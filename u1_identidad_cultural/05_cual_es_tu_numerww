<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>N√∫meros en Espa√±ol - Tel√©fono Interactivo</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Roboto+Slab:wght@400;700&display=swap');

        body {
            font-family: 'Roboto Slab', serif;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background-color: #e0d8c7;
            margin: 0;
            gap: 60px;
            flex-wrap: wrap;
            padding: 20px;
        }

        .phone {
            width: 320px;
            background-color: #c7b299;
            border-radius: 15px;
            border: 2px solid #5a4a3a;
            box-shadow: 10px 10px 20px rgba(0,0,0,0.3), inset 0 0 15px rgba(0,0,0,0.2);
            padding: 30px;
        }

        .keypad {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
        }

        .key {
            height: 70px;
            background: linear-gradient(145deg, #e6cba6, #bfa886);
            color: #5a4a3a;
            border-radius: 10px;
            border: 2px solid #a38f78;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 2.5em;
            font-weight: 700;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: 5px 5px 10px rgba(0,0,0,0.2), inset 0 0 5px rgba(255,255,255,0.3);
            user-select: none;
        }
        
        .shake {
            animation: shake 0.5s ease-in-out;
            border-color: #dc3545 !important;
        }

        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            20%, 60% { transform: translateX(-10px); }
            40%, 80% { transform: translateX(10px); }
        }

        .key.drag-over {
            border-color: #007bff;
            transform: scale(1.05);
        }
        
        .key.correct {
            background: #28a745;
            color: white;
            border-color: #1e7e34;
            font-size: 1.5em;
            padding: 5px;
            line-height: 1.2;
            pointer-events: none;
        }

        #key-0 {
            grid-column: 2 / 3;
        }

        .right-panel {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 20px;
        }

        .assignment-panel {
            width: 250px;
            padding: 20px;
            background-color: #d1c5b4;
            border-radius: 10px;
            box-shadow: 5px 5px 15px rgba(0,0,0,0.2);
            border: 2px solid #5a4a3a;
        }

        .assignment-panel h3 {
            text-align: center;
            margin-top: 0;
            color: #5a4a3a;
            border-bottom: 2px solid #a38f78;
            padding-bottom: 10px;
        }

        .draggable-name {
            background-color: #8c785d;
            color: white;
            padding: 12px;
            border-radius: 8px;
            margin-bottom: 10px;
            text-align: center;
            font-size: 1.2em;
            cursor: grab;
            box-shadow: 3px 3px 7px rgba(0,0,0,0.2);
            transition: opacity 0.3s, transform 0.2s, box-shadow 0.2s;
            border: 3px solid transparent;
        }
        
        .draggable-name.selected {
            box-shadow: 0 0 15px 5px #007bff;
            border-color: #007bff;
            transform: scale(1.05);
        }

        #resetButton {
            display: none;
            padding: 10px 20px;
            font-family: 'Roboto Slab', serif;
            font-size: 1.2em;
            color: white;
            background-color: #007bff;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            box-shadow: 3px 3px 7px rgba(0,0,0,0.2);
            transition: background-color 0.2s, transform 0.1s;
        }
        
        #victoryModal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
            display: flex;
            justify-content: center;
            align-items: center;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.3s ease-in-out;
            z-index: 1000;
        }
        
        #victoryModal.visible {
            opacity: 1;
            pointer-events: auto;
        }
        
        .modal-content {
            background-color: white;
            padding: 40px;
            border-radius: 15px;
            text-align: center;
            color: #333;
            box-shadow: 0 5px 25px rgba(0,0,0,0.4);
        }
        
        .modal-content h2 {
            margin: 0;
            font-size: 2.5em;
            color: #28a745;
        }
    </style>
</head>
<body>

    <div class="phone">
        <div class="keypad">
            <div class="key" id="key-1" data-number="1">1</div>
            <div class="key" id="key-2" data-number="2">2</div>
            <div class="key" id="key-3" data-number="3">3</div>
            <div class="key" id="key-4" data-number="4">4</div>
            <div class="key" id="key-5" data-number="5">5</div>
            <div class="key" id="key-6" data-number="6">6</div>
            <div class="key" id="key-7" data-number="7">7</div>
            <div class="key" id="key-8" data-number="8">8</div>
            <div class="key" id="key-9" data-number="9">9</div>
            <div class="key" id="key-0" data-number="0">0</div>
        </div>
    </div>

    <div class="right-panel">
        <div class="assignment-panel">
            <h3>Arrastra o selecciona un n√∫mero</h3>
            <div id="name-list"></div>
        </div>
        <button id="resetButton">Reiniciar üîÅ</button>
    </div>
    
    <div id="victoryModal">
        <div class="modal-content">
            <h2>¬°Muy bien!<br>¬°Felicidades! üéâ</h2>
        </div>
    </div>

    <script>
        // --- CONSTANTES Y VARIABLES DE ESTADO ---
        const numberMap = {
            '0': { name: 'cero', text: 'CERO' }, '1': { name: 'uno', text: 'UNO' }, '2': { name: 'dos', text: 'DOS' },
            '3': { name: 'tres', text: 'TRES' }, '4': { name: 'cuatro', text: 'CUATRO' }, '5': { name: 'cinco', text: 'CINCO' },
            '6': { name: 'seis', text: 'SEIS' }, '7': { name: 'siete', text: 'SIETE' }, '8': { name: 'ocho', text: 'OCHO' },
            '9': { name: 'nueve', text: 'NUEVE' }
        };
        const dtmfFrequencies = {
            '1':{f1:697,f2:1209},'2':{f1:697,f2:1336},'3':{f1:697,f2:1477},'4':{f1:770,f2:1209},'5':{f1:770,f2:1336},
            '6':{f1:770,f2:1477},'7':{f1:852,f2:1209},'8':{f1:852,f2:1336},'9':{f1:852,f2:1477},'0':{f1:941,f2:1336}
        };

        const keys = document.querySelectorAll('.key');
        const resetButton = document.getElementById('resetButton');
        const nameListContainer = document.getElementById('name-list');
        const victoryModal = document.getElementById('victoryModal');
        
        let spanishVoice = null;
        let correctCount = 0;
        let audioCtx;
        let selectedNameElement = null;

        // --- L√ìGICA DEL JUEGO ---

        function initializeGame() {
            setupKeyListeners();
            setupResetButton();
            populateAndShuffleNames();
            loadVoices();
            document.body.addEventListener('click', initAudioContext, { once: true });
        }

        function resetGame() {
            keys.forEach(key => {
                key.classList.remove('correct', 'shake');
                key.textContent = key.dataset.number;
                key.style.pointerEvents = 'auto';
            });
            populateAndShuffleNames();
            correctCount = 0;
            resetButton.style.display = 'none';
            victoryModal.classList.remove('visible');
            if (selectedNameElement) {
                selectedNameElement.classList.remove('selected');
                selectedNameElement = null;
            }
        }
        
        function populateAndShuffleNames() {
            nameListContainer.innerHTML = '';
            const nameElements = Object.values(numberMap).map(num => {
                const div = document.createElement('div');
                div.className = 'draggable-name';
                div.id = `name-${num.name}`;
                div.dataset.name = num.name;
                div.draggable = true;
                div.textContent = num.text;
                return div;
            });
            nameElements.sort(() => Math.random() - 0.5);
            nameElements.forEach(elem => {
                setupDragListeners(elem);
                elem.addEventListener('click', handleNameClick); // Listener para la selecci√≥n t√°ctil
                nameListContainer.appendChild(elem);
            });
        }

        function checkCompletion() {
            correctCount++;
            if (correctCount === keys.length) {
                speakText('¬°Muy bien! ¬°Felicidades!', true); // true para el audio animado
                victoryModal.classList.add('visible'); // Muestra el modal de victoria
                setTimeout(() => {
                    resetButton.style.display = 'block';
                }, 1500);
            }
        }
        
        function placeNumber(key, nameData) {
            playSuccessSound();
            const draggedElement = document.getElementById(`name-${nameData}`);
            key.textContent = draggedElement.textContent;
            key.classList.add('correct');
            if (draggedElement) draggedElement.style.display = 'none';
            checkCompletion();
        }

        // --- SONIDOS Y VOZ ---
        
        function initAudioContext() { if (!audioCtx) audioCtx = new (window.AudioContext || window.webkitAudioContext)(); }
        function playSuccessSound() { if (!audioCtx) return; const o=audioCtx.createOscillator(),g=audioCtx.createGain();o.type='sine';o.frequency.setValueAtTime(523.25,audioCtx.currentTime);g.gain.setValueAtTime(0.2,audioCtx.currentTime);o.connect(g);g.connect(audioCtx.destination);o.start();o.stop(audioCtx.currentTime+0.15); }
        function playDTMFTone(num) { if(!audioCtx||!dtmfFrequencies[num])return;const f=dtmfFrequencies[num],g=audioCtx.createGain(),o1=audioCtx.createOscillator(),o2=audioCtx.createOscillator();g.gain.setValueAtTime(0.25,audioCtx.currentTime);g.connect(audioCtx.destination);o1.type=o2.type='sine';o1.frequency.setValueAtTime(f.f1,audioCtx.currentTime);o2.frequency.setValueAtTime(f.f2,audioCtx.currentTime);o1.connect(g);o2.connect(g);o1.start();o2.start();o1.stop(audioCtx.currentTime+0.15);o2.stop(audioCtx.currentTime+0.15); }
        function speakText(text, isAnimated = false) {
             const utterance = new SpeechSynthesisUtterance(text);
             utterance.lang = 'es-ES';
             if (spanishVoice) utterance.voice = spanishVoice;
             if (navigator.platform.toUpperCase().indexOf('MAC') >= 0) utterance.rate = 0.8;
             if (isAnimated) { // Audio de victoria m√°s animado
                 utterance.pitch = 1.2;
                 utterance.rate = 1.1;
             }
             window.speechSynthesis.speak(utterance);
        }
        function loadVoices() { const s=()=>{const v=window.speechSynthesis.getVoices();spanishVoice=v.find(v=>v.name==='Google espa√±ol')||v.find(v=>v.lang.startsWith('es'))};s();if(window.speechSynthesis.onvoiceschanged!==undefined){window.speechSynthesis.onvoiceschanged=s} }
        
        // --- EVENTOS (LISTENERS Y HANDLERS) ---

        function setupKeyListeners() {
            keys.forEach(key => {
                key.addEventListener('click', handleKeyClick);
                key.addEventListener('dragover', (e) => { e.preventDefault(); key.classList.add('drag-over'); });
                key.addEventListener('dragleave', () => { key.classList.remove('drag-over', 'shake'); });
                key.addEventListener('drop', handleDrop);
            });
        }
        
        function setupDragListeners(element) {
            element.addEventListener('dragstart', (e) => {
                e.dataTransfer.setData('text/plain', element.dataset.name);
            });
        }

        function setupResetButton() {
            resetButton.addEventListener('click', resetGame);
        }

        function handleNameClick(event) {
            const currentSelection = event.currentTarget;
            if (selectedNameElement) {
                selectedNameElement.classList.remove('selected');
            }
            currentSelection.classList.add('selected');
            selectedNameElement = currentSelection;
        }

        function handleKeyClick(event) {
            const key = event.currentTarget;
            const number = key.dataset.number;
            playDTMFTone(number);

            if (selectedNameElement) { // L√≥gica para colocar con clic
                const selectedNameData = selectedNameElement.dataset.name;
                if (numberMap[number]?.name === selectedNameData) {
                    placeNumber(key, selectedNameData);
                } else {
                    key.classList.add('shake');
                }
                selectedNameElement.classList.remove('selected');
                selectedNameElement = null;
            } else if (!key.classList.contains('correct')) { // L√≥gica para escuchar el n√∫mero
                speakText(numberMap[number]?.name);
            }
        }

        function handleDrop(event) {
            event.preventDefault();
            const key = event.currentTarget;
            key.classList.remove('drag-over');
            const droppedName = event.dataTransfer.getData('text/plain');

            if (numberMap[key.dataset.number]?.name === droppedName) {
                placeNumber(key, droppedName);
            } else {
                key.classList.add('shake');
            }
        }

        // Iniciar la aplicaci√≥n
        document.addEventListener('DOMContentLoaded', initializeGame);
    </script>

</body>
</html>
